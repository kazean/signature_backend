import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.spring'
    id 'org.jetbrains.kotlin.plugin.jpa'
}

group 'org.delivery'
version '1.0-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext{
    set('springBootAdminVersion', '2.7.4')
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'

    implementation project(':db')
    implementation project(':common')
    // jjwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // kotlin
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    // logstash
    implementation 'net.logstash.logback:logstash-logback-encoder:7.3'
    // admin
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // micrometer-prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus:1.11.1'
    // statsd
    implementation 'io.micrometer:micrometer-registry-statsd:1.11.1'
    implementation 'io.micrometer:micrometer-core:1.11.1'

}

dependencyManagement {
    imports {
        mavenBom("de.codecentric:spring-boot-admin-dependencies:${property("springBootAdminVersion")}")
    }
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs += '-Xjsr305=strict'
        jvmTarget = '11'
    }
}

test {
    useJUnitPlatform()
}

bootJar {
    enabled = true
}

jar {
    enabled = false
}